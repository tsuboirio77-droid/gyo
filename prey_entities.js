// FILE: prey_entities.js
class SolitaryBoid extends Boid { constructor(image, x, y) { super('CUTLASS', image, x, y); this.isFleeing = false; } act(qtree, predators, planktonQtree, clickThreats) { if (this.isStunned) { this.acceleration = this.velocity.multiply(-0.1); return; } const allThreats = [...predators, ...clickThreats]; const fleeForce = this.flee(allThreats); this.isFleeing = fleeForce.magnitude() > 0; if (this.isFleeing) { this.applyForce(fleeForce.multiply(this.config.fleeForceMultiplier)); } else { const wander = new Vector((Math.random() - 0.5) * this.config.wanderForce, (Math.random() - 0.5) * this.config.wanderForce); const range = new Rectangle(this.position.x, this.position.y, CONFIG.AVOID_RADIUS, CONFIG.AVOID_RADIUS); const neighbors = qtree.query(range); const separationForce = this.calculateSeparation(neighbors).multiply(this.config.separationWeight); this.applyForce(wander); this.applyForce(separationForce); if (this.eatCooldownTimer === 0) { const foodAttraction = this.seekClosest(planktonQtree, CONFIG.VISUAL_RANGE).multiply(this.config.foodSeekForce); this.applyForce(foodAttraction); } } } update(deltaTime) { const speedLimit = this.isFleeing ? this.config.maxSpeed * this.config.fleeSpeedMultiplier : this.config.maxSpeed; super.update(deltaTime, speedLimit); } }